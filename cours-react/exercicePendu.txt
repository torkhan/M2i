Réalisation du jeu de pendu en react
une partie consiste donc à tirer au sort un mot ou une phrase, afficher le masque associé, et proposer des saisies possibles pour toutes les lettres de l’alphabet latin. On peut alors essayer une lettre après l'autre, 
ce qui actualise le masque jusqu’à ce que tout le texte soit visible : on pourra alors recommencer une partie.

Le but consiste donc, simplement, à trouver le texte en utilisant le moins d’essais possibles

L’affichage comprend deux parties : le masque de la devinette, et une série de boutons d'essai, à raison d’un par lettre. 
Par exemple, deux rangées de 13. Le masque utilise un underscore ( _ ) pour toute lettre de la devinette qui n’a pas encore été révélé. 
On prend soin de bien séparer visuellement chaque lettre à deviner, pour faciliter la perception des tailles des mots. 
Pour simplifier la saisie et l’exploitation des lettres, on cantonnera les devinettes et les boutons à l'alphabet latin majuscule, sans signes diacritiques (accents, cédilles, etc.). 
Donc 26 lettres de A à Z. Les lettres déjà essayées doivent être signalées visuellement (par exemple, grisées). 
Il n'est pas obligatoire d'interdire une nouvelle tentative dessus, 
c'est comme vous voulez. Une fois le texte deviné, 
la liste des boutons de lettres est remplacée par un seul bouton qui permet de redémarrer une partie… sans avoir à recharger la page

Comptez le nombre d’essais et affichez-le au fur et à mesure. 
Vous pouvez décider d’interdire un nouvel essai d’une lettre, ou au contraire compter double un essai d’une lettre déjà tentée (si vous indiquiez visuellement qu’elle l’était). 
Pour calculer plutôt un score, vous pouvez compter 2 points pour une lettre présente, -1 pour une absente, et -2 pour une lettre retentée, par exemple.

test